#![allow(unused_imports, unused)]
use ser::{
    bvc, bvi, conversion::*, instruction::Instruction, machine::*, memory::*, parser::*, stack::*,
    storage::*, traits::*,
};
use z3::ast::*;

pub const SIMPLE_TOKEN: &str = r#"608060405234801561001057600080fd5b50600436106100415760003560e01c806327e235e314610046578063a9059cbb14610078578063f8b2cb4f1461008d575b600080fd5b610066610054366004610143565b60006020819052908152604090205481565b60405190815260200160405180910390f35b61008b610086366004610165565b6100b6565b005b61006661009b366004610143565b6001600160a01b031660009081526020819052604090205490565b336000908152602081905260409020548111156100d257600080fd5b33600090815260208190526040812080548392906100f19084906101a5565b90915550506001600160a01b0382166000908152602081905260408120805483929061011e9084906101be565b90915550505050565b80356001600160a01b038116811461013e57600080fd5b919050565b60006020828403121561015557600080fd5b61015e82610127565b9392505050565b6000806040838503121561017857600080fd5b61018183610127565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156101b8576101b861018f565b92915050565b808201808211156101b8576101b861018f56fea264697066735822122041d29a76727a31c9e4ec86703553a675712f98921d6c4bc9b23f274a963de18264736f6c63430008130033"#;

fn main() {
    let pgm = Parser::with_pgm(SIMPLE_TOKEN).parse();
    let mut evm = Evm::new(pgm);

    let execution = evm.exec();
    {
        let leaf = execution.states.leaves();
        assert_eq!(15, leaf.len());
    
    }

    let reachability_report = Evm::exec_check(execution);
    println!("Report: {:#?}", reachability_report);
    let traces = reachability_report
        .iter()
        .map(|trace| trace.0.iter().map(|t| &t.1).collect::<Vec<_>>())
        .collect::<Vec<_>>();
    println!("traces: {:#?}", traces);
    let reverted_traces = traces
        .into_iter()
        .filter(|t| *t.last().unwrap().clone() == Instruction::Revert)
        .collect::<Vec<_>>();
    println!("TRACES WITH REVERTS {:#?}", reverted_traces);
}